//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""LeftHand"",
            ""id"": ""e91950de-df34-46f4-bbef-97df59992eed"",
            ""actions"": [
                {
                    ""name"": ""Primarybutton"",
                    ""type"": ""Button"",
                    ""id"": ""ea3e3603-a8a5-46d5-a300-7f47c7e7f98e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""c1799523-70d9-4396-b975-339b0b4d6f78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""87ac81eb-0e7e-45fe-94b2-10c6d303db0f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerPressed"",
                    ""type"": ""Button"",
                    ""id"": ""fde6a519-a0e2-4793-a8c7-9b031e8232c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerValue"",
                    ""type"": ""Value"",
                    ""id"": ""e112e6c1-1b22-4574-8b13-2612b727bee7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPressed"",
                    ""type"": ""Button"",
                    ""id"": ""00b39b54-0e8b-4c8b-a83e-fa8e588a147d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GripValue"",
                    ""type"": ""Value"",
                    ""id"": ""47c53075-c329-4439-8df0-6087daa68528"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""4caac547-bd9b-4d85-a9c5-8845249cfc2e"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""840dd9fd-d589-400f-a6cb-e52ba2da2623"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""b46652d4-e31b-4e41-b85b-7f2589d23c47"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b03a3b69-81ef-4c13-9ada-5cdf07c79097"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""78561706-fbbe-4399-bf74-50df55385635"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fdbf8a8d-ccb1-45fd-8bb5-031def4bf63b"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Primarybutton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf48176e-ac24-49a0-ae83-025b59feb11d"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""353043f2-7a28-4c83-8b9a-6107d5e9e35b"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""524720f5-0df4-49e6-be74-cf4b8a9b8af6"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3026c886-6e0c-438f-8d24-eda30c8e7f96"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""GripPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a830117c-080c-44b7-8e7b-1a327161033c"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c77a24f-00c8-43a3-ac91-701252ec3664"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""GripValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""29a9067a-2ac3-4c5b-890c-64c33eba2851"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""6367dabe-18fa-442b-a184-9c5cd1cce2e4"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""f0c12867-4e25-4935-86cd-585f2e84eae8"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""0b976204-5a95-418f-876e-bca3225d0c2d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""d336e582-2dc0-4000-9dbe-ff09f9da0a2f"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""00ab15e1-2be2-46e2-8a0b-790f1d11b2b9"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""508d75b1-a670-4514-a236-8d798600f250"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""15b2c12f-2056-49dd-b02b-c40149ee72d6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e0c9886f-4792-4b60-b240-698fc830e5cf"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7336eb4c-74bb-4c7a-a563-82cc64df4708"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e082424-01bd-4f27-80ad-4673b4302704"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHand"",
            ""id"": ""d885ef37-dc58-4369-b6ca-f6d6f7c1917d"",
            ""actions"": [
                {
                    ""name"": ""Primarybutton"",
                    ""type"": ""Button"",
                    ""id"": ""e5d88cbe-4ae1-4d2b-b2f0-66548533fe0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""20b6a311-bd19-422b-a064-e8574fa1c4ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""d4ffb983-4ece-454e-933a-276605f37497"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerPressed"",
                    ""type"": ""Button"",
                    ""id"": ""3a4282cb-4dda-438e-99cd-72685e6943e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerValue"",
                    ""type"": ""Value"",
                    ""id"": ""6501ab62-9484-4a89-91f4-75e2e225208b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPressed"",
                    ""type"": ""Button"",
                    ""id"": ""dd2c4e0a-4fe0-4fae-b8b1-398239390fa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GripValue"",
                    ""type"": ""Value"",
                    ""id"": ""6db67316-28dc-473a-8513-894e741a7812"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""a0c6e5fa-de42-44ed-a10b-a98f65d63d7f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""5503b24b-20df-4c1e-bca6-105282c10cef"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""59a59c63-2295-4772-b3f2-56ca7d79934a"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""11ff7729-4742-4e69-ad1b-17fc35d17a87"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f3a13262-0f07-4ad5-88cf-6afcb60c91bb"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Primarybutton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ead0933e-7abd-4063-9d11-ba744a17319a"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1977569a-d465-47a5-91f6-3bff14816dc6"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f0f7325-58be-4ba7-a77b-421aa31cdf75"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb804701-0588-46dc-9252-f5d756991a62"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""GripPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c52d35b-65a7-41b7-8d92-1a5e254a1534"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e51c7926-f715-416f-bc43-c553ec09f4ab"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""GripValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""9f289bc9-2dde-4ad3-b872-7b9928d7f8cc"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""0997763f-6cb5-4ff1-9fb8-b4d4e38c19f8"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""f9f4ad5b-d43a-4b57-a926-475cf5efb3ac"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""6cd631eb-ac10-4553-852f-088481e7d884"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""9ca64817-6d01-4c43-b12e-7ccf96f81492"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""b73a56db-67f2-49e7-aa58-2a35cb6b219c"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""fc8ceb2c-7136-42e1-a4fc-247a42f36dae"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""19c2749f-2d37-4482-a4d4-1025e0abbb19"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fea8f6cf-4e3c-4266-a5fa-1a76e1899a52"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d6de7da-ae02-4103-96ca-55f107cd6624"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Head"",
            ""id"": ""95dea3aa-f447-49b0-a1b2-7d9b1a0d6f9f"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""5672fada-2b6c-434d-8749-21ab2d1133bd"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""d280c376-01ed-4f5e-9ad9-1b4cbc057e57"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d085d132-6f53-4b24-be6b-44a0b5d2d59c"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a82db7eb-f2e2-4af9-aa1c-a39a022b01d2"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_Primarybutton = m_LeftHand.FindAction("Primarybutton", throwIfNotFound: true);
        m_LeftHand_SecondaryButton = m_LeftHand.FindAction("SecondaryButton", throwIfNotFound: true);
        m_LeftHand_Joystick = m_LeftHand.FindAction("Joystick", throwIfNotFound: true);
        m_LeftHand_TriggerPressed = m_LeftHand.FindAction("TriggerPressed", throwIfNotFound: true);
        m_LeftHand_TriggerValue = m_LeftHand.FindAction("TriggerValue", throwIfNotFound: true);
        m_LeftHand_GripPressed = m_LeftHand.FindAction("GripPressed", throwIfNotFound: true);
        m_LeftHand_GripValue = m_LeftHand.FindAction("GripValue", throwIfNotFound: true);
        m_LeftHand_Position = m_LeftHand.FindAction("Position", throwIfNotFound: true);
        m_LeftHand_Rotation = m_LeftHand.FindAction("Rotation", throwIfNotFound: true);
        m_LeftHand_TrackingState = m_LeftHand.FindAction("Tracking State", throwIfNotFound: true);
        m_LeftHand_HapticDevice = m_LeftHand.FindAction("Haptic Device", throwIfNotFound: true);
        m_LeftHand_Menu = m_LeftHand.FindAction("Menu", throwIfNotFound: true);
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_Primarybutton = m_RightHand.FindAction("Primarybutton", throwIfNotFound: true);
        m_RightHand_SecondaryButton = m_RightHand.FindAction("SecondaryButton", throwIfNotFound: true);
        m_RightHand_Joystick = m_RightHand.FindAction("Joystick", throwIfNotFound: true);
        m_RightHand_TriggerPressed = m_RightHand.FindAction("TriggerPressed", throwIfNotFound: true);
        m_RightHand_TriggerValue = m_RightHand.FindAction("TriggerValue", throwIfNotFound: true);
        m_RightHand_GripPressed = m_RightHand.FindAction("GripPressed", throwIfNotFound: true);
        m_RightHand_GripValue = m_RightHand.FindAction("GripValue", throwIfNotFound: true);
        m_RightHand_Position = m_RightHand.FindAction("Position", throwIfNotFound: true);
        m_RightHand_Rotation = m_RightHand.FindAction("Rotation", throwIfNotFound: true);
        m_RightHand_TrackingState = m_RightHand.FindAction("Tracking State", throwIfNotFound: true);
        m_RightHand_HapticDevice = m_RightHand.FindAction("Haptic Device", throwIfNotFound: true);
        // Head
        m_Head = asset.FindActionMap("Head", throwIfNotFound: true);
        m_Head_Position = m_Head.FindAction("Position", throwIfNotFound: true);
        m_Head_Rotation = m_Head.FindAction("Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private ILeftHandActions m_LeftHandActionsCallbackInterface;
    private readonly InputAction m_LeftHand_Primarybutton;
    private readonly InputAction m_LeftHand_SecondaryButton;
    private readonly InputAction m_LeftHand_Joystick;
    private readonly InputAction m_LeftHand_TriggerPressed;
    private readonly InputAction m_LeftHand_TriggerValue;
    private readonly InputAction m_LeftHand_GripPressed;
    private readonly InputAction m_LeftHand_GripValue;
    private readonly InputAction m_LeftHand_Position;
    private readonly InputAction m_LeftHand_Rotation;
    private readonly InputAction m_LeftHand_TrackingState;
    private readonly InputAction m_LeftHand_HapticDevice;
    private readonly InputAction m_LeftHand_Menu;
    public struct LeftHandActions
    {
        private @PlayerInputActions m_Wrapper;
        public LeftHandActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Primarybutton => m_Wrapper.m_LeftHand_Primarybutton;
        public InputAction @SecondaryButton => m_Wrapper.m_LeftHand_SecondaryButton;
        public InputAction @Joystick => m_Wrapper.m_LeftHand_Joystick;
        public InputAction @TriggerPressed => m_Wrapper.m_LeftHand_TriggerPressed;
        public InputAction @TriggerValue => m_Wrapper.m_LeftHand_TriggerValue;
        public InputAction @GripPressed => m_Wrapper.m_LeftHand_GripPressed;
        public InputAction @GripValue => m_Wrapper.m_LeftHand_GripValue;
        public InputAction @Position => m_Wrapper.m_LeftHand_Position;
        public InputAction @Rotation => m_Wrapper.m_LeftHand_Rotation;
        public InputAction @TrackingState => m_Wrapper.m_LeftHand_TrackingState;
        public InputAction @HapticDevice => m_Wrapper.m_LeftHand_HapticDevice;
        public InputAction @Menu => m_Wrapper.m_LeftHand_Menu;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterface != null)
            {
                @Primarybutton.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnPrimarybutton;
                @Primarybutton.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnPrimarybutton;
                @Primarybutton.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnPrimarybutton;
                @SecondaryButton.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnSecondaryButton;
                @SecondaryButton.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnSecondaryButton;
                @SecondaryButton.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnSecondaryButton;
                @Joystick.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnJoystick;
                @Joystick.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnJoystick;
                @Joystick.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnJoystick;
                @TriggerPressed.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTriggerPressed;
                @TriggerValue.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTriggerValue;
                @GripPressed.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGripPressed;
                @GripPressed.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGripPressed;
                @GripPressed.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGripPressed;
                @GripValue.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGripValue;
                @GripValue.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGripValue;
                @GripValue.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGripValue;
                @Position.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnRotation;
                @TrackingState.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTrackingState;
                @HapticDevice.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnHapticDevice;
                @Menu.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_LeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Primarybutton.started += instance.OnPrimarybutton;
                @Primarybutton.performed += instance.OnPrimarybutton;
                @Primarybutton.canceled += instance.OnPrimarybutton;
                @SecondaryButton.started += instance.OnSecondaryButton;
                @SecondaryButton.performed += instance.OnSecondaryButton;
                @SecondaryButton.canceled += instance.OnSecondaryButton;
                @Joystick.started += instance.OnJoystick;
                @Joystick.performed += instance.OnJoystick;
                @Joystick.canceled += instance.OnJoystick;
                @TriggerPressed.started += instance.OnTriggerPressed;
                @TriggerPressed.performed += instance.OnTriggerPressed;
                @TriggerPressed.canceled += instance.OnTriggerPressed;
                @TriggerValue.started += instance.OnTriggerValue;
                @TriggerValue.performed += instance.OnTriggerValue;
                @TriggerValue.canceled += instance.OnTriggerValue;
                @GripPressed.started += instance.OnGripPressed;
                @GripPressed.performed += instance.OnGripPressed;
                @GripPressed.canceled += instance.OnGripPressed;
                @GripValue.started += instance.OnGripValue;
                @GripValue.performed += instance.OnGripValue;
                @GripValue.canceled += instance.OnGripValue;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);

    // RightHand
    private readonly InputActionMap m_RightHand;
    private IRightHandActions m_RightHandActionsCallbackInterface;
    private readonly InputAction m_RightHand_Primarybutton;
    private readonly InputAction m_RightHand_SecondaryButton;
    private readonly InputAction m_RightHand_Joystick;
    private readonly InputAction m_RightHand_TriggerPressed;
    private readonly InputAction m_RightHand_TriggerValue;
    private readonly InputAction m_RightHand_GripPressed;
    private readonly InputAction m_RightHand_GripValue;
    private readonly InputAction m_RightHand_Position;
    private readonly InputAction m_RightHand_Rotation;
    private readonly InputAction m_RightHand_TrackingState;
    private readonly InputAction m_RightHand_HapticDevice;
    public struct RightHandActions
    {
        private @PlayerInputActions m_Wrapper;
        public RightHandActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Primarybutton => m_Wrapper.m_RightHand_Primarybutton;
        public InputAction @SecondaryButton => m_Wrapper.m_RightHand_SecondaryButton;
        public InputAction @Joystick => m_Wrapper.m_RightHand_Joystick;
        public InputAction @TriggerPressed => m_Wrapper.m_RightHand_TriggerPressed;
        public InputAction @TriggerValue => m_Wrapper.m_RightHand_TriggerValue;
        public InputAction @GripPressed => m_Wrapper.m_RightHand_GripPressed;
        public InputAction @GripValue => m_Wrapper.m_RightHand_GripValue;
        public InputAction @Position => m_Wrapper.m_RightHand_Position;
        public InputAction @Rotation => m_Wrapper.m_RightHand_Rotation;
        public InputAction @TrackingState => m_Wrapper.m_RightHand_TrackingState;
        public InputAction @HapticDevice => m_Wrapper.m_RightHand_HapticDevice;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void SetCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterface != null)
            {
                @Primarybutton.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnPrimarybutton;
                @Primarybutton.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnPrimarybutton;
                @Primarybutton.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnPrimarybutton;
                @SecondaryButton.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnSecondaryButton;
                @SecondaryButton.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnSecondaryButton;
                @SecondaryButton.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnSecondaryButton;
                @Joystick.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnJoystick;
                @Joystick.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnJoystick;
                @Joystick.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnJoystick;
                @TriggerPressed.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTriggerPressed;
                @TriggerValue.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTriggerValue;
                @GripPressed.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGripPressed;
                @GripPressed.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGripPressed;
                @GripPressed.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGripPressed;
                @GripValue.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGripValue;
                @GripValue.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGripValue;
                @GripValue.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGripValue;
                @Position.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnRotation;
                @TrackingState.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTrackingState;
                @TrackingState.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTrackingState;
                @HapticDevice.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnHapticDevice;
            }
            m_Wrapper.m_RightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Primarybutton.started += instance.OnPrimarybutton;
                @Primarybutton.performed += instance.OnPrimarybutton;
                @Primarybutton.canceled += instance.OnPrimarybutton;
                @SecondaryButton.started += instance.OnSecondaryButton;
                @SecondaryButton.performed += instance.OnSecondaryButton;
                @SecondaryButton.canceled += instance.OnSecondaryButton;
                @Joystick.started += instance.OnJoystick;
                @Joystick.performed += instance.OnJoystick;
                @Joystick.canceled += instance.OnJoystick;
                @TriggerPressed.started += instance.OnTriggerPressed;
                @TriggerPressed.performed += instance.OnTriggerPressed;
                @TriggerPressed.canceled += instance.OnTriggerPressed;
                @TriggerValue.started += instance.OnTriggerValue;
                @TriggerValue.performed += instance.OnTriggerValue;
                @TriggerValue.canceled += instance.OnTriggerValue;
                @GripPressed.started += instance.OnGripPressed;
                @GripPressed.performed += instance.OnGripPressed;
                @GripPressed.canceled += instance.OnGripPressed;
                @GripValue.started += instance.OnGripValue;
                @GripValue.performed += instance.OnGripValue;
                @GripValue.canceled += instance.OnGripValue;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
            }
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);

    // Head
    private readonly InputActionMap m_Head;
    private IHeadActions m_HeadActionsCallbackInterface;
    private readonly InputAction m_Head_Position;
    private readonly InputAction m_Head_Rotation;
    public struct HeadActions
    {
        private @PlayerInputActions m_Wrapper;
        public HeadActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Head_Position;
        public InputAction @Rotation => m_Wrapper.m_Head_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Head; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadActions set) { return set.Get(); }
        public void SetCallbacks(IHeadActions instance)
        {
            if (m_Wrapper.m_HeadActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_HeadActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_HeadActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_HeadActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_HeadActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_HeadActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_HeadActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_HeadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public HeadActions @Head => new HeadActions(this);
    public interface ILeftHandActions
    {
        void OnPrimarybutton(InputAction.CallbackContext context);
        void OnSecondaryButton(InputAction.CallbackContext context);
        void OnJoystick(InputAction.CallbackContext context);
        void OnTriggerPressed(InputAction.CallbackContext context);
        void OnTriggerValue(InputAction.CallbackContext context);
        void OnGripPressed(InputAction.CallbackContext context);
        void OnGripValue(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
    public interface IRightHandActions
    {
        void OnPrimarybutton(InputAction.CallbackContext context);
        void OnSecondaryButton(InputAction.CallbackContext context);
        void OnJoystick(InputAction.CallbackContext context);
        void OnTriggerPressed(InputAction.CallbackContext context);
        void OnTriggerValue(InputAction.CallbackContext context);
        void OnGripPressed(InputAction.CallbackContext context);
        void OnGripValue(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
    }
    public interface IHeadActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
